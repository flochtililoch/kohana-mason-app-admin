<comp>
	<attr>
		<key name="form">NULL</key>
		<key name="form_expired">NULL</key>
		<key name="valid_envs" process="true">Kohana::valid_environment()</key>
	</attr>
	<methods>
		<method name="environments_validate" args="posted_data">
			<![CDATA[
			$form = array('data' => $posted_data);
			
			$db = $posted_data['db'];
			unset($posted_data['db']);
			
			foreach($posted_data as $locale => $settings)
			{
				if(I18n::valid_locale($locale, FALSE) !== TRUE)
				{
					$form['errors'] = I18n::get('Invalid locale : ${invalid_locale}', array('invalid_locale' => $locale));
					return $form;
				}
				try
				{
					if(!is_numeric($settings['channel']))
					{
						$form['errors'] = I18n::get('Invalid channel : ${invalid_channel} for locale ${locale}', array('invalid_channel' => $settings['channel'], 'locale' => $locale));
						return $form;
					}
					unset($settings['channel']);
				}
				catch(Exception $e)
				{
					$form['errors'] = I18n::get('Invalid posted data');
					return $form;
				}
				foreach($settings as $env => $domain)
				{
					if(!preg_match('/^([a-z0-9]([-a-z0-9]*[a-z0-9])?\\.)+((a[cdefgilmnoqrstuwxz]|aero|arpa)|(b[abdefghijmnorstvwyz]|biz)|(c[acdfghiklmnorsuvxyz]|cat|com|coop)|d[ejkmoz]|(e[ceghrstu]|edu)|f[ijkmor]|(g[abdefghilmnpqrstuwy]|gov)|h[kmnrtu]|(i[delmnoqrst]|info|int)|(j[emop]|jobs)|k[eghimnprwyz]|l[abcikrstuvy]|(m[acdghklmnopqrstuvwxyz]|mil|mobi|museum)|(n[acefgilopruz]|name|net)|(om|org)|(p[aefghklmnrstwy]|pro)|qa|r[eouw]|s[abcdeghijklmnortvyz]|(t[cdfghjklmnoprtvwz]|travel)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])$/i', $domain))
					{
						$form['errors'] = I18n::get('Invalid domain : ${invalid_domain} for locale ${locale} / env ${env}', array('invalid_domain' => $domain, 'locale' => $locale, 'env' => $env));
						return $form;
					}
				}
			}
			foreach($db as $env => $db_settings)
			{
				if(empty($db_settings['host']) || empty($db_settings['name']) || empty($db_settings['user']))
				{
					$form['errors'] = I18n::get('Host, name & user cannot be empty');
					return $form;
				}
			}
			return TRUE;
			
			]]>
		</method>
	</methods>
	<php>
		<![CDATA[

		$init = FALSE;

		$steps = array(
			'dhandler' => 'main',
			'main' => 'environments',
			'environments' => 'confirm'
			);
			
		$forms = array(
			'main' => array(
				'fields' => array('name', 'path', 'i18n_source', 'timezone', 'locales', 'default_view_type', 'salt', 'environments'),
				'rules' => array(
					'name' => array(
								'regex' => array('/^[A-Za-z0-9-]+$/'),
								'not_empty' => array(TRUE)
								),
					'path' => array(
								'regex' => array('/^\/(.*)$/')
								),
					'i18n_source' => array(
								'i18n::valid_locale' => array(TRUE),
								'not_empty' => array(TRUE)
								),
					'timezone' => array(
								'i18n::valid_timezone' => array(TRUE),
								'not_empty' => array(TRUE)
								),
					'locales' => array(
								'i18n::valid_locale' => array(TRUE),
								'not_empty' => array(TRUE)
								),
					'default_view_type' => array(
								'regex' => array('/(PHP|TAL){1}/'),
								'not_empty' => array(TRUE)
								),
					'salt' => array(
								'regex' => array('/^.*(?=.*[a-z])(?=.*[A-Z]).*$/'),
								'not_empty' => array(TRUE),
								'min_length' => array(6)
								),
					'environments' => array(
								'Kohana::valid_environment' => array(TRUE),
								'not_empty' => array(TRUE)
								),
					),
				'filters' =>array(
					'name' => 'trim'
					)
				),
			'environments' => array(
				'validate' => 'environments_validate'
				)
			);
			
		// Current step is the running component / 'virtual' component
		$step = count($this->request->param()) ? $this->request->shift_param() : $this->request->controller;

		// If step exists, data posted
		if(array_key_exists($step, $steps) && count($_POST) && array_key_exists('csrf', $_POST))
		{
			// If csrf token is valid
			if(CSRF::valid($_POST['csrf'], $step))
			{
				//Remove token from posted data
				unset($_POST['csrf']);
				
				// If custom validation method is required
				if(array_key_exists('validate', $forms[$step]))
				{
					// Validate data through custom method
					$this->form = $this->{$forms[$step]['validate']}($_POST);
				}
				else
				{
					// Validate data through common system
					$this->form = Validate::form(
						$_POST,
						$forms[$step]
						);
				}

				// If data is valid
				if($this->form === TRUE)
				{
					// Store data in session using next step as a key
					Session::instance()->set($steps[$step], $_POST);
				
					// Then redirect to next step
					$this->request->redirect(I18n::instance()->uri('create/'.$steps[$step]));
				}
			}
			else
			{
				$this->form_expired = TRUE;
			}
		}
		// If last step 'confirmation'
		elseif($step === 'confirm')
		{
			$app_data = array();
			
			foreach($steps as $form)
			{
				$app_data[$form] = Session::instance()->get($form);
			}
			
			$files = array();
			$cl = array();
			
			$apppath = $app_data['environments']['path'];
			$appname = $app_data['environments']['name'];
			$cl[] = sprintf(Kohana::config('app.cl.cvs_export'), $appname);
			foreach($app_data['environments']['locales'] as $locale)
			{
				// GENERATE PO FILES
				$cl[] = sprintf(Kohana::config('app.cl.i18n'), $appname, $locale);
				if(($_locale = I18n::valid_locale($locale)) !== FALSE)
				{
					foreach(array('routes', 'content') as $pofile)
					{
						$files['i18n/'.$locale.'/LC_MESSAGES/'.$pofile.'.po'] = sprintf(
							file_get_contents(MODPATH.'component/templates/i18n/'.$pofile.'.po'),
							I18n::$locales[$locale]->getLanguage()->getPluralform(),
							I18n::$locales[$locale]->getLanguage()->getLanguage(),
							I18n::$locales[$locale]->getCountry()->getCountry(),
							$apppath.$appname
							);
					}
				}
				
				// GENERATE CONFIG FILES
				$files['config/kohana.php'] = sprintf(
					'<?php'.substr(file_get_contents(Kohana::find_file('templates', 'config/kohana')), 5, -1),
					$app_data['environments']['timezone'],
					$app_data['environments']['i18n_source']
				);
				
				$files['config/auth.php'] = sprintf(
					'<?php'.substr(file_get_contents(Kohana::find_file('templates', 'config/auth')), 5, -1),
					$app_data['environments']['salt']
				);
				
				$files['config/orm.php'] = sprintf(
					'<?php'.substr(file_get_contents(Kohana::find_file('templates', 'config/orm')), 5, -1),
					$app_data['confirm']['db']['dev']['host'] ? $app_data['confirm']['db']['dev']['host'] : '',
					$app_data['confirm']['db']['dev']['name'] ? $app_data['confirm']['db']['dev']['name'] : '',
					$app_data['confirm']['db']['dev']['user'] ? $app_data['confirm']['db']['dev']['user'] : '',
					$app_data['confirm']['db']['dev']['password'] ? $app_data['confirm']['db']['dev']['password'] : '',
					$app_data['confirm']['db']['test']['host'] ? $app_data['confirm']['db']['test']['host'] : '',
					$app_data['confirm']['db']['test']['name'] ? $app_data['confirm']['db']['test']['name'] : '',
					$app_data['confirm']['db']['test']['user'] ? $app_data['confirm']['db']['test']['user'] : '',
					$app_data['confirm']['db']['test']['password'] ? $app_data['confirm']['db']['test']['password'] : '',
					$app_data['confirm']['db']['stag']['host'] ? $app_data['confirm']['db']['stag']['host'] : '',
					$app_data['confirm']['db']['stag']['name'] ? $app_data['confirm']['db']['stag']['name'] : '',
					$app_data['confirm']['db']['stag']['user'] ? $app_data['confirm']['db']['stag']['user'] : '',
					$app_data['confirm']['db']['stag']['password'] ? $app_data['confirm']['db']['stag']['password'] : '',
					$app_data['confirm']['db']['www']['host'] ? $app_data['confirm']['db']['www']['host'] : '',
					$app_data['confirm']['db']['www']['name'] ? $app_data['confirm']['db']['www']['name'] : '',
					$app_data['confirm']['db']['www']['user'] ? $app_data['confirm']['db']['www']['user'] : '',
					$app_data['confirm']['db']['www']['password'] ? $app_data['confirm']['db']['www']['password'] : ''
				);
				
				$app_path = sha1(serialize($app_data));
				$out = '';
				
				if(!is_dir(CACHEPATH.$app_path))
				{
					// Create directory
					mkdir(CACHEPATH.$app_path, 0777, TRUE);

					// Set permissions (must be manually set to fix umask issues)
					chmod(CACHEPATH.$app_path, 0777);
				}
				
				// Export app skeleton
				system(sprintf(Kohana::config('app.cl.cvs_export'), CACHEPATH.$app_path), $_out);
				$out .= $_out;
				
				foreach($app_data['environments']['locales'] as $locale)
				{
					system(sprintf(Kohana::config('app.cl.cvs_export'), CACHEPATH.$app_path, $locale), $_out);
					$out .= $_out;
				}
				
				echo Kohana::debug($out);
				
			}
		}

		if($step !== 'dhandler')
		{
			$this->data = Session::instance()->get($step);
		}
		else
		{
			$init = TRUE;
		}

		]]>
	</php>
	<process>
		<key name="init">$init</key>
		<key name="step">$step</key>
	</process>
</comp>